# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-01-29 14:54
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0019_delete_filter'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'unique': 'Category has to be unique'}, help_text='Category has to be unique', max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Blog Categories',
            },
        ),
        migrations.CreateModel(
            name='BlogListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('sub_title', models.CharField(blank=True, max_length=255)),
                ('posts_per_page', models.IntegerField(default=25, help_text='Number of posts shown per page (min  5, max 30)', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(30)])),
            ],
            options={
                'verbose_name': 'Blog List Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.wagtailcore.fields.RichTextField()),
                ('body', wagtail.wagtailcore.fields.StreamField((('heading_block', wagtail.wagtailcore.blocks.StructBlock((('heading_text', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('size', wagtail.wagtailcore.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('title-small', 'Small'), ('title-med', 'Medium'), ('title-large', 'Large'), ('title-extra-large', 'Extra Large')], required=False))))), ('indented_paragraph_block', wagtail.wagtailcore.blocks.RichTextBlock(features=['ol', 'ul', 'bold', 'italic', 'hr', 'link'], icon='fa-paragraph', label='Indented Text', template='blocks/indented_paragraph_block.html')), ('paragraph_block', wagtail.wagtailcore.blocks.RichTextBlock(features=['ol', 'ul', 'bold', 'italic', 'hr', 'link'], icon='fa-paragraph', label='Text', template='blocks/paragraph_block.html')), ('image_block', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)), ('caption', wagtail.wagtailcore.blocks.CharBlock(blank=True, required=False))))), ('landscape_images_block', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)), ('caption', wagtail.wagtailcore.blocks.CharBlock(blank=True, required=False)))), help_text='Add even number of images (it inserts 2 images on the line)', icon='image', label='Landscape Images', template='blocks/landscape_images_block.html')), ('image_slider_block', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)),)), help_text='Full width image slider, add at least 4 images', icon='image', label='Image Slider', template='blocks/image_slider_block.html')), ('block_quote', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.TextBlock(required=False)), ('author', wagtail.wagtailcore.blocks.CharBlock(blank=True, label='e.g. Mary Berry', required=False))))), ('embed_block', wagtail.wagtailembeds.blocks.EmbedBlock(help_text='Insert an embed URL e.g https://www.youtube.com/embed/SGJFWirQ3ks', icon='fa-s15', template='blocks/embed_block.html')), ('raw_html', wagtail.wagtailcore.blocks.RawHTMLBlock(help_text='A text area for entering raw HTML which will be rendered unescaped', label='Raw HTML', required=False, template='blocks/raw_html_block.html'))), blank=True, verbose_name='Page body')),
                ('date_published', models.DateField(default=datetime.date.today, verbose_name='Published date')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='blog.BlogCategory')),
                ('image', models.ForeignKey(blank=True, help_text='Landscape mode only', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'verbose_name': 'Blog Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.BlogPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_blogpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogTagPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'verbose_name': 'Blog Tag Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='RelatedPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_pages', to='blog.BlogPage')),
                ('related_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
            ],
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
